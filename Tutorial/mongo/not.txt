# -------------------------------------------- Visualizer
  mongodb compass

# -------------------------------------------- Run Contianer
  docker run -d --rm -p 27017:27017 --name mongo-c -v ./database:/data/db \
    -e MONGO_INITDB_ROOT_USERNAME=admin \
    -e MONGO_INITDB_ROOT_PASSWORD=admin123 \
    mongo

  docker run -d --rm -p 27017:27017 --name mongo-c -v ./database:/data/db -e MONGO_INITDB_ROOT_USERNAME=admin -e MONGO_INITDB_ROOT_PASSWORD=admin123   -e MONGO_INITDB_DATABASE=mydatabase  mongo

  Windows:
    docker run -d --rm -p 27017:27017 --name mongo-c -v "$(pwd)/database:/data/db" -e MONGO_INITDB_ROOT_USERNAME=admin -e MONGO_INITDB_ROOT_PASSWORD=admin123 mongo
    docker run -d -p 27017:27017 --name mongo-c -v "$(pwd)/database:/data/db" -e MONGO_INITDB_ROOT_USERNAME=admin -e MONGO_INITDB_ROOT_PASSWORD=admin123 mongo

# -------------------------------------------- Remove Container
  docker stop mongo-c

  docker rmi mongo
# -------------------------------------------- Export and Import Database

  mkdir -p ./database/backup
  cp -r ./databaseBackup/jmeter/ ./database/backup/jmeter/

  docker exec -it mongo-c /bin/bash

  # EXPORT
  mongodump --uri="mongodb://admin:admin123@localhost:27017/?authMechanism=SCRAM-SHA-256&authSource=admin" --db=jmeter --out=/data/db/backup

  # IMPORT
  mongorestore --uri="mongodb://admin:admin123@localhost:27017/?authMechanism=SCRAM-SHA-256&authSource=admin" --db=jmeter /data/db/backup/jmeter
# -------------------------------------------- CRUD
  # Read
    console.log(await models.User.find());
    console.log(await models.User.find().populate("tier"));

    # ----
    try {
      const user = await models.User.findOne({ _id: staticUserId });
    } catch (error) {
      console.error("Error finding user:", error);
    }

    # ----
    try {
    const test = await models.Test.find({
      _id: "656d633488510354e2491bed",
    }).populate("user");
      console.log(test);
    } catch (error) {
      console.error("Error finding test:", error);
    }

    return helperService.returnPositiveMessage(res, "temp message", null);
    });

  # INSERT
    try {
      const newTest = await models.Test.create({
        name: staticTestName,
        user: staticUserId,
        isFinished: false,
      });
      console.log("New test created:", newTest);
      const insertedId = newTest._id.toString();
      console.log(insertedId);
    } catch (error) {
      console.error("Error creating test:", error);
    }