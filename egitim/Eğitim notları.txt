========================================================================
#Dockerfile
FROM node

# set current working director
WORKDIR /app

# target files and destination file | relative ve absolute path
# COPY . ./  
COPY . /app

# build etmek için
RUN npm install

# porttan dinlemek için
EXPOSE 80

# container de run etmek için container run edildiği zaman yapar
CMD ["node", "server.js"]

========================================================================
optimized build almak için cache ler kullanılır. yani her komut tekrar tekrar çalışmaz. 
Sadece "Değişiklik olan layer'dan sonraki layerlar" yeniden tekralanır. Yani mesela biz yukarıda kopyaladığımız kodda bir değişiklik yaptığımız zaman bütün dosyalar tekrardan kopyalanıcak ve run npm install tekrardan çalışıcak. Bunu istemeyiz.
aşağıdaki gibi halledebiliriz.

#Dockerfile

FROM node

WORKDIR /app

COPY package.json /app

RUN npm install

COPY . /app

EXPOSE 80

CMD ["node", "server.js"]

========================================================================
image bir kere build olduktan sonra sen kodda ne yaparsan yap yaptığın değişiklik eklenmeyecektir.
yeni build alman gerekir.

========================================================================
#IMAGE

# image buildi için
docker build . 

# image versionları için name:tag kullanılır
# burda mesela 14 versiyonunu kullanıyoruz.
FROM node:14 

# build ederken kendi tagıni verebilirsin
docker build -t slave:latest .
docker build -t slave:1 .

# image ları gösterir
docker images

# detaylı gösterir
docker image inspect

# stopped container'ların image'larını silme
docker rmi <id>

# stop all container and remove them
docker stop $(docker ps -aq)
docker rm $(docker ps -aq)


# remove all images
docker image prune

# bu da silebilir
docker rmi $(docker images -q)


========================================================================
========================================================================
========================================================================
========================================================================
========================================================================
========================================================================
========================================================================
========================================================================
========================================================================
========================================================================
========================================================================
========================================================================
========================================================================
========================================================================
========================================================================
========================================================================
========================================================================
========================================================================
========================================================================
========================================================================
========================================================================
# CONTAINER
# çalıştırır
docker run <id>

#expose edilen port publish olur böylece dinlenebilir. 80 -> Dockerfile | 3000 -> localport
docker run -p 3000:80 <id>

# --rm ile exit edilen container otomatik olarak silinir
docker run -p 3000:80 --rm <id>

# -d detach mode: arka planda çalışmak için
docker run -p 3000:80 --rm -d <id>

# --name isimlendirme
docker run -p 3000:80 --rm --name container-master <id>

# durdurur
docker stop <name>

# başlatır
docker start <name>

# running contianerları gör
docker ps -a 
docker ps --help

# container'a dosya kopyalama
docker cp <target_File> <destination_Container_Name>:<destination_location>
docker cp ./myFile.txt container-master:/test

# container'dan kopyalama
docker cp container-master:/test ./

========================================================================
attach ve detach
detach'de başlatılınca arka planda yürür logları göremezsin kendi consolunda -d filan yazılır.
attach modda görebilirsin 

docker run -it <name>
-it => interactive terminal

========================================================================
# DOCKER HUB
docker pull <image_Name>

# pushlamadan önce repo oluşturuyoruz. repo isimiyle kendi localimizde o isimde bir image olşturup puşlamamız gerekiyor.
# login olmamız lazım 
docker login
docker push <image_Name>

========================================================================
========================================================================
========================================================================
========================================================================
========================================================================
========================================================================
========================================================================
========================================================================
========================================================================
========================================================================
========================================================================
========================================================================
========================================================================
========================================================================
========================================================================
========================================================================
========================================================================
========================================================================