========================================================================
#Dockerfile
FROM node

# set current working director
WORKDIR /app

# target files and destination file | relative ve absolute path
# COPY . ./  
COPY . /app

# build etmek için
RUN npm install

# porttan dinlemek için
EXPOSE 80

# container de run etmek için container run edildiği zaman yapar
CMD ["node", "server.js"]

========================================================================
optimized build almak için cache ler kullanılır. yani her komut tekrar tekrar çalışmaz. 
Sadece "Değişiklik olan layer'dan sonraki layerlar" yeniden tekralanır. Yani mesela biz yukarıda kopyaladığımız kodda bir değişiklik yaptığımız zaman bütün dosyalar tekrardan kopyalanıcak ve run npm install tekrardan çalışıcak. Bunu istemeyiz.
aşağıdaki gibi halledebiliriz.

#Dockerfile

FROM node

WORKDIR /app

COPY package.json /app

RUN npm install

COPY . /app

EXPOSE 80

CMD ["node", "server.js"]

========================================================================
image bir kere build olduktan sonra sen kodda ne yaparsan yap yaptığın değişiklik eklenmeyecektir.
yeni build alman gerekir.

========================================================================
#IMAGE

# image buildi için
docker build . 

# image versionları için name:tag kullanılır
# burda mesela 14 versiyonunu kullanıyoruz.
FROM node:14 

# build ederken kendi tagıni verebilirsin
docker build -t slave:latest .
docker build -t slave:1 .

# image ları gösterir
docker images

# detaylı gösterir
docker image inspect

# stopped container'ların image'larını silme
docker rmi <id>

# stop all container and remove them
docker stop $(docker ps -aq)
docker rm $(docker ps -aq)


# remove all images
docker image prune

# bu da silebilir
docker rmi $(docker images -q)

========================================================================
========================================================================
========================================================================
========================================================================
========================================================================
========================================================================
========================================================================
========================================================================
========================================================================
# CONTAINER
# çalıştırır
docker run <id>

#expose edilen port publish olur böylece dinlenebilir. 80 -> Dockerfile | 3000 -> localport
docker run -p 3000:80 <name>

# --rm ile exit edilen container otomatik olarak silinir
docker run -p 3000:80 --rm <name>

# -d detach mode: arka planda çalışmak için
docker run -p 3000:80 --rm -d <name>

# --name isimlendirme
docker run -p 3000:80 --rm --name container-master <name>

# durdurur
docker stop <name>

# başlatır
docker start <name>

# run olan container'ın shelline bağlanma
docker exec -it edu-container /bin/bash

# running contianerları gör
docker ps -a 
docker ps --help

# container'a dosya kopyalama
docker cp <target_File> <destination_Container_Name>:<destination_location>
docker cp ./myFile.txt container-master:/test

# container'dan kopyalama
docker cp container-master:/test ./

========================================================================
attach ve detach
detach'de başlatılınca arka planda yürür logları göremezsin kendi consolunda -d filan yazılır.
attach modda görebilirsin 

docker run -it <name>
-it => interactive terminal

========================================================================
# DOCKER HUB
docker pull <image_Name>

# pushlamadan önce repo oluşturuyoruz. repo isimiyle kendi localimizde o isimde bir image olşturup puşlamamız gerekiyor.
# login olmamız lazım 
docker login
docker push <image_Name>

========================================================================
========================================================================
========================================================================
========================================================================
========================================================================
========================================================================
========================================================================
# VOLUME 
# volumlelar host makinelerle container'ların ortak kullanabildiği storage alanlarıdır.

# fark şekillderde voluma'lar oluşturulabilir


========================================================================

# anonymous volume
VOLUME ["/app/feedbackDirectory"] 
# bu şekilde oluşturulmuş bir volume anonymous'tur ve container herhangi bir yere bu volume'u yerleştirir.
docker volume ls 
# ile görebilirsin
docker volume --help
# ama container silindikten sonra bu volume'a erişemezsin

#volume silme
docker volume rm <volume-name>
docker volume prune 

==== 

#Dockerfile

FROM node

WORKDIR /app

COPY package.json /app

RUN npm install

COPY . /app

EXPOSE 80

# VOLUME ["<folder under container>"]
VOLUME ["/app/feedbackDirectory"]

CMD ["node", "server.js"]
========================================================================

# named volumes 
# bu volume'lar Dockerfile içerisinde tanımlanmaz run edilirken -v <volume-name>:<directory path> verilir
docker run -p 3000:80 --rm --name container-master -v feedback:/app/feedbackDirectory <name>

# stop ettikten sonra yine aynı volume komutuyla başlatırsan aynı şekilde erişebilirsin

# volumelara bakabilirsin.
docker volume ls 
========================================================================

#bind mount
# kodda yapılan değişiklikler container'a yansıtılmaz.
# snapshot ile çalışır. 
# bunun üstesinden gelebiliriz çünkü tekrar tekrar build almak istemeyebiliriz.
# host machine ile container arasında bind mount oluşturulur
# istersen file istersen folder bind edebilirsin
# docker desktop'tan file sharing açık olmalı tabi varsa
# -v "<host-absolute-path>:<container-path>"
docker run -p 3000:80 --rm --name container-master -v feedback:/app/feedbackDirectory -v "C:\\folder:/app" <name>


# path verirken kolaylık için 
macOS / Linux: -v $(pwd):/app
Windows: -v "%cd%":/app

# 53. derste bind mount ve anonymous volume u birlikte yapıyor.

========================================================================
========================================================================
========================================================================
========================================================================
========================================================================
========================================================================
========================================================================
# env variable

# docker file içerisinde variable tanımlayabilirsin.
# node.js processlerin global variable'larını destekler
# mesela app.listen(80); 
# yerine app.listen(process.env.PORT);
# diyebiliriz

#Dockerfile
FROM node

# set current working director
WORKDIR /app

# target files and destination file | relative ve absolute path
COPY . /app

# build etmek için
RUN npm install

ENV PORT 80

# porttan dinlemek için
EXPOSE $PORT

# container de run etmek için container run edildiği zaman yapar
CMD ["node", "server.js"]


docker run -p 3000:8000 --env PORT=8000 --rm --name container-master image-master

docker run -p 3000:8000 -e PORT=8000 -e AGE=24 --rm --name container-master image-master

# ya da file oluşturabiliriz.
.env dosyası oluşturduğunu düşün (ismi önemli değil) aşağıdaki de içeriği
PORT=8000


docker run -p 3000:8000 --env-file ./.env --rm --name container-master image-master

# file ' a yazıp paylaştığın bilgiler imagı kullanan diğer kullanıcılar tarafından görülebilir docker history <image> ile 


#benzer şekilde arg da kullanılabiliyor 63. derste gösteriyor.
========================================================================
========================================================================
========================================================================
# logları görmek için 
docker logs <container-name>

========================================================================
========================================================================
========================================================================
========================================================================
========================================================================
========================================================================
========================================================================
========================================================================
========================================================================
# NETWORKING