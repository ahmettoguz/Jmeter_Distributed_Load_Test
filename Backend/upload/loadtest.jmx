PR:
	1. After making changes in your branch, commit and push to remote your branch.
	2. Change your branch to master.
	3. Pull changes.
	4. Change your branch to your branch which you make changes.
	5. Merge master into your branch.
		$ git merge master
	6. Resolve conflicts.
	7. Push to origin.
	8. Create pull request.
------------------------------------------------------------------------------------------------------------------


Commit: 
	$ git add *
	$ git commit -m "message"
------------------------------------------------------------------------------------------------------------------

Push:
	# git push
------------------------------------------------------------------------------------------------------------------

Display Branch:
	$ git branch -r
------------------------------------------------------------------------------------------------------------------

Switch Branch:
	$ git checkout Ahmet
------------------------------------------------------------------------------------------------------------------

Status:
	$ git status
------------------------------------------------------------------------------------------------------------------

Discard changes:
	$ git checkout -- .
	
	# To unstage changes
	$ git restore --staged .

	# To discard changes in the working directory
	$ git restore .

	# To remove untracked files
	$ git clean -fd

------------------------------------------------------------------------------------------------------------------

Delete Branch:
	Remote:
		$ git push origin --delete branch_name

	Local:
		soft (need to commit changes)
		$ git branch -d branch_name

		hard (do not mind changes)
		$ git branch -D branch_name
------------------------------------------------------------------------------------------------------------------

Unstage:
	After you add folder to stage you can undo that with 
	$ git reset

	Or you can check specific folder from status and unstage that file.
	$ git reset Git/git.txt
------------------------------------------------------------------------------------------------------------------

Log:
	$ git log --graph --decorate --oneline

	$ git log
	$ git log -n 3

	To exit press q
------------------------------------------------------------------------------------------------------------------

Diff: 
	$ git diff
	$ git diff --staged
------------------------------------------------------------------------------------------------------------------

Stash
	Display:
		$ git stash list
	
	Apply:
		$ git stash apply stash@{n}

	Remove:
		$ git stash drop stash@{n}
------------------------------------------------------------------------------------------------------------------

Undo Commit:
	Local:
		With changes (it do not discard commit):
			$ git reset --soft HEAD~1

		Without changes (discard commit):
			$ git reset --hard HEAD~1

		Arguments:
			~1 : means 1 commit undo
			~2 : means 2 commit undo
	
	Remote:
		Remove From History:
			As in local take your commit back with soft or hard reset.
			And push it to to remote by force push: git push --force origin master

		Keep backwards commit in history and commit undo as a new commit:
			Revert commits one by one.
			Revert means that undo change in that commit. (İf you specify first commit, it do not take commit form first, it just undo changes in first commit) so that if you want to undo changes more than 1 commit you should revert it one by one and push them.

			$ git revert c1d23c2er35vwe

Untrack file before added .gitignore:
	git rm --cached /env/db.env
	git rm -rf --cached /env
	
------------------------------------------------------------------------------------------------------------------

.gitignore:
	# ignore all .lib files
	*.lib
	# but do track abc.lib
	!abc.lib
	# only ignore the TODO file in the current directory, not subdir/TODO
	/TODO
	# ignore all files in the build/ directory
	build/
	# ignore doc/notes.txt, but not doc/sr/arch.txt
	doc/*.txt
	# ignore all .pdf files in the doc/ directory and any of its subdirectories
	doc/**/*.pdf

	Example files
	https://github.com/github/gitignore

Ignore files in folder but not the folder:
	music/*
	!music/.gitkeep

------------------------------------------------------------------------------------------------------------------

Amend:
	change last commit. Use in add any other changes.
	$ git commit --amend
------------------------------------------------------------------------------------------------------------------

Init folder:
	$ git init
------------------------------------------------------------------------------------------------------------------

Blame: 
	You can see the changes on the file in history:
	$ git blame Git/git.txt
------------------------------------------------------------------------------------------------------------------

Difference of fetch and pull:
	git fetch retrieves updates from the remote repository but does not modify the local working directory.
	git pull fetches updates from the remote repository and also updates the local working directory by merging.
------------------------------------------------------------------------------------------------------------------

Merge: 
	3 Ways to merge:
		1. Rebase: 
			First rule of the rebase: "Do not rebase!!!"
			shifting branches from backwards to front of some other branches. It is clear but complicated. 
		2. CherryPick
			Another complicated process.
		3. Normal merge among branches.
------------------------------------------------------------------------------------------------------------------

Braches:
	Kısaca Türkçe açıklama: Bir proje yaratıldığı zaman bu dallar olmalıdır. Master dal versiyonların tutulduğu daldır. Geliştiriciler Develop dalından feature dalı ayırıp geliştirmelerini bu feature dalında yapmalıdır. Fature dalda işi bitince develop dalına birleşir. Develop yeteri kadar ilerleyince sürüm ileri sürmek amacıyla release branchi develop'tan oluşturulur ve burada versionun hataları giderilir ve belgeler eklenir. Versiyon işlemleri bitince master'dala version eklenir. Çok acil bir hata düzeltilmesi gerektiği zaman hotfix branchi masterdan çekilir ve gerekli düzenlemeler yapıldıktan sonra hem master'a hem de develop branchine aktarılır. Böylelikle hem masterdaki hatalar hem de develop kısmındaki hatalar giderilir. Developta giderilen hatalar featurelara ve releaselere de merge ile etki edeceğinden önemlidir.

	Master:
		It keeps track of the official release history (v1, v2, v3...).

	Hotfix:
		It is used for quick bug fixes for a released product in master.
		After some hot fix is done, it will be merged into master and development

	Release:
		When the features are developed and release time is coming this branch is created. 
		Documentations and bugfix for release done in this branch and after all of this changes. Release branch merge into master branch

	Develop:
		Feature branches merged into that branch.

	Feature:
		Every feature is developed in its branch and merged to Develop, not Master.

------------------------------------------------------------------------------------------------------------------

Display remote url:
	$ git remote -v
------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------
